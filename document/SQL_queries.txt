10 SQL Queries of our application:

Queries - A list of 10 SQL queries. 
Descriptions - A 1-2 sentence description of what each query is supposed to do

Simple Queries: 

1. Data visualization based on monthly sales. Compare 12 months to see which month of the year has the highest amount of sales.

SELECT order_purchase_month, SUM(price) AS total_sales
FROM  OrderInfo NATURAl JOIN Item
GROUP BY order_purchase_month
ORDER BY order_purchase_month;


2. Filter the data based on geolocational state information to find our details of sales from the specific state. (the where clause can be changed to filter any other condition based on the filter bar/search bar design)

SELECT * FROM Item 
NATURAL JOIN City 
NATURAL JOIN Customer 
NATURAL JOIN OrderInfo 
NATURAL JOIN Payment
NATURAL JOIN Category 
NATURAL JOIN Geolocation 
NATURAL JOIN Product 
NATURAL JOIN Review 
NATURAL JOIN Seller
WHERE seller_state= 'PR';


3. What are the top 10 types of products customers buy from our website (in terms of both the total number of orders and total sales for each product type)? 

Query: join Item and Product datasets, group by product category and then count the number of orders and sum up the sales amount of each order

SELECT product_category_name_english AS product_category, 
 	COUNT(order_id) AS order_count, 
 	SUM(price) AS price_sum
FROM Product NATURAL JOIN Item NATURAL JOIN Category
GROUP BY product_category_name
Order BY order_count DESC, price_sum DESC
LIMIT 10;


4. What are the top 10 types of products that received the most full score in customer reviews (in both 2017 and 2018)?

Query: join order_items, order_reviews, and products, select only orders with a review score of 5, group by product category, and count the number of orders. Create subqueries for 2017 and 2018 data respectively by filtering order shipping date and selecting product types that are in both subtables

WITH TEMP1 AS
   (SELECT product_category_name, 
     Order_purchase_year,
     review_score, 
     COUNT(order_id) AS fullscore_num
     FROM Item NATURAL JOIN Review NATURAL JOIN Product NATURAL JOIN OrderInfo
     WHERE review_score = 5 AND order_purchase_year < 2019
     GROUP BY product_category_name)
SELECT product_category_name_english AS Product, fullscore_num
FROM TEMP1
NATURAL JOIN Category
ORDER BY fullscore_num DESC
LIMIT 10;


5. Data visualization for geographic distribution of orders and sales by years

Query: join sellers, order_items by seller_id, group by seller_city and count the number of orders and sum the sales amount. Select the specific years/months we are interested in. 

SELECT seller_city, COUNT(order_id) AS order_num, SUM(price) AS sales_amount
FROM Seller NATURAL JOIN Item NATURAL JOIN OrderInfo
WHERE order_purchase_year = 2018
GROUP BY seller_city
ORDER BY seller_city;


6. Show the average rating and the number of review for each product category/each seller so that customers can easily evaluate the product quality from each category/seller

Query: join OrderInfo, Item, Review, Category and Product, group by product category and averages the review scores and sums up the total review number of each group. 

Type 1: (group by product category)
SELECT product_category_name_english, AVG(review_score) as avgreview_2018, count(*) AS review_num
              FROM Item
                       NATURAL JOIN Product
                       NATURAL JOIN OrderInfo
                       NATURAL JOIN Review
                       Natural JOIN Category
              WHERE order_purchase_year = 2018
              GROUP BY product_category_name
              ORDER BY avgreview_2018 DESC;
Type 2:  (group by each seller)    
SELECT seller_id, AVG(review_score) as avgreview_2018, count(*) AS review_num
              FROM Item
                       NATURAL JOIN Product
                       NATURAL JOIN OrderInfo
                       NATURAL JOIN Review
              WHERE order_purchase_year = 2018
              GROUP BY seller_id
              ORDER BY avgreview_2018 DESC;



Complex Queries:

7. Query the differences of total orders between 2016, 2017, and 2018 for each product category. What kind of products improved sales (in terms of orders) in 2018, and what kind of products did not?

Query: join order_items and products, group by product category, and sum the sales amount of the orders. Create subqueries for different years or different months within a year. Create a new column to calculate the difference between each year/month. Select the product categories with increments.

WITH TEMP1 AS (SELECT product_category_name, 
  	      COUNT(order_id) AS order_2016
              FROM Item
                   NATURAL JOIN Product
                   NATURAL JOIN OrderInfo
              WHERE order_purchase_year = 2016
              GROUP BY product_category_name),
TEMP2 AS (SELECT product_category_name, 
	  COUNT(order_id) AS order_2017
      	  FROM Item
	       NATURAL JOIN Product
	       NATURAL JOIN OrderInfo
      	  WHERE order_purchase_year = 2017
      	  GROUP BY product_category_name),
TEMP3 AS (SELECT product_category_name, COUNT(order_id) AS order_2018
          FROM Item
	       NATURAL JOIN Product
	       NATURAL JOIN OrderInfo
      	  WHERE order_purchase_year = 2018
          GROUP BY product_category_name)
SELECT product_category_name_english AS Product, 
	order_2016, 
	order_2017, 
	order_2018, 
	(order_2017 - order_2016) AS difference_2016_2017,
        (order_2018 - order_2017) AS difference_2017_2018
FROM TEMP1 NATURAL JOIN TEMP2 NATURAL JOIN TEMP3 NATURAL JOIN Category;



8. As part of market analysis, users may want to know whether the sales of their online shopping platform are affected by the number of Walmart stores in the areas. Users may query and create a sales report for the top 5 cities with the most Walmart stores. 

Query: For each of the five city, list the total number of Walmart stores, total number of orders (based on customer location) by year, total sales (based on product price) by year, and the most popular product category based on sales (in English) by year. The result is ordered by the number of Walmart stores.

WITH top_cities
       AS (SELECT city, walmart
           FROM City
           ORDER BY walmart DESC
           LIMIT 5),
    orders_products
       AS (SELECT O.order_id,
               O.order_deliver_customer_year AS year,
               C.customer_id,
               C.customer_city AS city,
               P.product_id,
               P.product_category_name,
               I.price
           FROM OrderInfo O
           JOIN Item I ON O.order_id = I.order_id
           JOIN Product P ON I.product_id = P.product_id
           JOIN Customer C ON O.customer_id = C.customer_id),
   total_orders
       AS (SELECT city, year, COUNT(DISTINCT order_id) AS count
           FROM orders_products
           WHERE city IN (SELECT city FROM top_cities)
           GROUP BY city, year),
   total_sales
       AS (SELECT city, year, SUM(price) AS sales
           FROM orders_products
           WHERE city IN (SELECT city FROM top_cities)
           GROUP BY city, year),
   top_product
       AS (SELECT city, year, c.product_category_name_english, SUM(price) AS sales
           FROM orders_products op
           JOIN Category c ON c.product_category_name = op.product_category_name
           WHERE city IN (SELECT city FROM top_cities)
           GROUP BY city, year, c.product_category_name_english)
SELECT tc.city AS City,
       tc.walmart AS 'Number of Walmart Stores',
       tto.year AS Year,
       tto.count AS 'Number of Orders',
       ts.sales AS Sales,
       tp.product_category_name_english AS 'Top Selling Product'
FROM top_cities tc
NATURAL JOIN total_orders tto
NATURAL JOIN total_sales ts
JOIN top_product tp ON tc.city = tp.city
WHERE tto.year = tp.year AND tp.sales >= ALL (SELECT sales
                                              FROM top_product tp
                                              WHERE tp.city = tc.city
                                              AND tp.year = tto.year)
ORDER BY tc.walmart DESC, tto.year;


9. The reviews from buyers can provide insights for merchants. We list the top 10 highest average review score product. We also list the single product with highest standard deviation, which indicates that the product has polarized reviews. Users can query and create a review report for the top 10 products with highest average review score and standard deviation score. We also allow user to filter the review by a specific duration of time.

Query: The query first creates 1 index (order_id) on order_data. Then RDBMS will automatically create any indices on primary keys of any table, so we already have indices on other table. We make use of views to temporarily store frequently used data and store information by joining fours table. After we acquire the review score for specific category, we group by product category and calculate the average review score and standard deviation of review score. Finally we order the products by sorting average score in a descending order and standard deviation score in an ascending order. The filtered 10 products are the ones with highest average review score and relatively less polarized. We set the threshold of number of review to 3 so that the review score is more representative.

CREATE INDEX order_id_index
ON OrderInfo(order_id);

WITH temp
	AS (SELECT R.review_id AS review_id,
		   R.review_score AS review_score,
		   P.product_id AS product_id,
		   C.product_category_name_english AS product_category
	FROM Review R
	JOIN Item I
	ON I.order_id = R.order_id
	JOIN Product P
	ON P.product_id = I.product_id
	JOIN Category C
	ON C.product_category_name = P.product_category_name)
SELECT product_category,
AVG(review_score) AS avg_review_score,
STDDEV(review_score) AS std_dev_review_score,
COUNT(*) AS review_num
FROM temp
GROUP BY product_category
HAVING COUNT(*) > 3
ORDER BY avg_review_score DESC, std_dev_review_score ASC
LIMIT 10;


10. As part of sales analysis, retail companies may want to learn about different payment habits of customers in different states. This query compares the differences in total, average, max, and min payment values by credit card users and boleto (bank tickets) users from each state. Businesses may gain geographical insights on customers’ paying habits and make decisions on future investments and plans.

Query: join Customer, OrderInfo, Item, and Payment, group by customer state, and calculate the sum, average, max, and min of the payment values of the orders. Create subqueries for customers using credit cards and boleto (bank tickets) respectively. Create a new column to calculate the difference between different types of customers. Select the product categories and differences in total, average, max, and min payment values.

WITH TEMP1
  AS (SELECT customer_state, SUM(payment_value) AS total_payment_credit,
             AVG(payment_value) AS avg_payment_credit,
             MIN(payment_value) AS min_payment_credit,
             MAX(payment_value) AS max_payment_credit
        FROM Item
                 NATURAL JOIN Product
                 NATURAL JOIN OrderInfo
                 NATURAL JOIN Payment
                 NATURAL JOIN Customer
        WHERE payment_type     = 'credit_card'
        GROUP BY customer_state),
TEMP2
  AS (SELECT customer_state, SUM(payment_value) as total_payment_boleto,
             AVG(payment_value) AS avg_payment_boleto,
             MIN(payment_value) AS min_payment_boleto,
             MAX(payment_value) AS max_payment_boleto
        FROM Item
                 NATURAL JOIN Product
                 NATURAL JOIN OrderInfo
                 NATURAL JOIN Payment
                 NATURAL JOIN Customer
        WHERE payment_type = 'boleto'
        GROUP BY customer_state)

SELECT DISTINCT customer_state,
     ROUND((total_payment_credit - total_payment_boleto), 2) AS total_paydiff,
     ROUND((avg_payment_credit - avg_payment_boleto), 2) AS avg_paydiff,
     ROUND((max_payment_credit - max_payment_boleto), 2) AS max_paydiff,
     ROUND((min_payment_credit - min_payment_boleto), 2) AS min_paydiff
FROM TEMP1 NATURAL JOIN TEMP2
ORDER BY total_paydiff DESC
--------------------------------------------------------------------------------------------------------------------------------------------------------

Credentials - Instructions and guest credentials for accessing the database:

db_config = {
    "username" : "clarajelly_",
    "host": "database-1.cs3tfszk6va6.us-east-1.rds.amazonaws.com",
    "port": "3306",
    "password": "Clara_0625"
}

